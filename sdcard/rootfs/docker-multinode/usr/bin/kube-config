#!/bin/bash

# Catch errors
trap 'exit' ERR

if [[ ${K8S_DEBUG} == 1 ]]; then
    set -x
fi

INSTALL_DEFAULT_TIMEZONE="Europe/Helsinki"
INSTALL_DEFAULT_HOSTNAME="kubepi"

KUBERNETES_DIR=/etc/kubernetes-on-arm
KUBERNETES_ON_ARM_ADDONS_DIR=${KUBERNETES_DIR}/addons
KUBERNETES_ENV_DIR=${KUBERNETES_DIR}/env
KUBERNETES_ENV_FILE=${KUBERNETES_ENV_DIR}/env.conf

SUPPORTED_K8S_VERSION=v1.4.1
KUBERNETES_ON_ARM_IMAGE_VERSION=0.8.0

DNS_DOMAIN="cluster.local"
DNS_IP=10.16.0.10
POD_NETWORK_CIDR=10.244.0.0/16

usage(){
    cat <<EOF
Welcome to kube-config!

With this utility, you can setup Kubernetes on ARM!

Usage: 
    kube-config install - Installs docker and makes your board ready for kubernetes

    kube-config enable-master - Enable the master services and then kubernetes is ready to use
        - FYI, etcd data will be stored in the /var/lib/kubelet/etcd directory. Backup that directory if you have important data.
    kube-config enable-worker [master-ip] - Enable the worker services and then kubernetes has a new node
    
    kube-config enable-addon [addon] ...[addon_n] - Enable one or more addons
        - Automatically deployed (mandatory) addons
            - dns: Makes all services accessible via DNS
            - dashboard: A general-purpose Web UI for Kubernetes
        - Optional Kubernetes addons
            - registry: Makes a central docker registry
            - loadbalancer: A loadbalancer that exposes services to the outside world.
            - heapster: Cluster monitoring for Kubernetes. Has a frontend with graphs how the cluster resources are used.
            - helm: Package manager for Kubernetes

    kube-config disable - Disable Kubernetes on this node, reverting the enable actions, useful if something went wrong or you just want to stop Kubernetes
    kube-config disable-addon [addon] ...[addon_n] - Disable one or more addons
    
    kube-config info - Outputs some version information and info about your board and Kubernetes
    kube-config help - Display this help text
EOF
}

# Root is required
if [[ ${EUID} != 0 ]]; then
    echo "Please run as root"
    usage
    exit 1
fi

install(){

    # Source the commands, e.g. os_install, os_post_install, board_install and board_post_install
    if [[ -f ${KUBERNETES_ENV_FILE} ]]; then
        source ${KUBERNETES_ENV_FILE}
    fi

    # If some of the options are unset, ask the user
    # This makes it possible to export OS and BOARD before running this command (requires that no env.conf is present)
    if [[ -z ${BOARD} || -z ${OS} ]]; then
        read -p "Which board is this running on? Options: [$(ls -l ${KUBERNETES_ENV_DIR}/board | grep ".sh" | awk '{print $9}'| cut -d. -f1 | sed ':a;N;s/\n/, /;ta')]. " BOARD
        read -p "Which OS do you have? Options: [$(ls -l ${KUBERNETES_ENV_DIR}/os | grep ".sh" | awk '{print $9}'| cut -d. -f1 | sed ':a;N;s/\n/, /;ta')]. " OS
    fi

    # If some of the options doesn't exist, exit
    if [[ ! -f ${KUBERNETES_ENV_DIR}/board/${BOARD}.sh ]]; then
        echo "Invalid board: ${BOARD}. That value does not exist. Exiting..."
        exit
    fi
    if [[ ! -f ${KUBERNETES_ENV_DIR}/os/${OS}.sh ]]; then
        echo "Invalid os: ${OS}. That value does not exist. Exiting..."
        exit
    fi

    # OK, both BOARD and OS are valid. Write the info to the file (even if it was the same as before)
    echo -e "OS=${OS}\nBOARD=${BOARD}" > ${KUBERNETES_ENV_FILE}

    # Source the board/os specific functions
    source ${KUBERNETES_ENV_DIR}/board/${BOARD}.sh
    source ${KUBERNETES_ENV_DIR}/os/${OS}.sh

    # If we have a external command file, use it
    if [[ $(type -t board_install) == "function" ]]; then
        board_install
    fi
    if [[ $(type -t os_install) == "function" ]]; then
        os_install
    fi

    # Download helm
    curl -sSL https://github.com/luxas/kubernetes-on-arm/releases/download/v0.8.0/helm > /usr/local/bin/helm
    chmod +x /usr/local/bin/helm

    # Install docker if it doesn't exist
    did_update=0
    if [[ ! -f $(which docker 2>&1) && $(uname -m) == "aarch64" ]]; then

        # Trust Ubuntu's gpg keys
        apt-key adv --keyserver keyserver.ubuntu.com --recv C0B21F32
        apt-key adv --keyserver keyserver.ubuntu.com --recv 437D05B5

        # Add ubuntu repos so we can get docker from there
        cat > /etc/apt/sources.list.d/docker.list <<-EOF
		deb http://ports.ubuntu.com xenial main
		deb http://ports.ubuntu.com xenial-updates universe
		EOF

        apt-get update -y
        apt-get install -y docker.io

        rm /etc/apt/sources.list.d/docker.list
        apt-get update -y
        did_update=1
    elif [[ ! -f $(which docker 2>&1) && $(uname -m) == "arm"* ]]; then
        apt-key adv --keyserver http://keyserver.ubuntu.com --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
        echo "deb https://apt.dockerproject.org/repo raspbian-jessie main" > /etc/apt/sources.list.d/docker.list
        apt-get install -y docker-engine
        did_update=1
    fi

    # Install kubeadm
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    if [[ ${did_update} == 0 ]]; then apt-get update -y; fi
    apt-get install kubeadm

    # Set hostname
    if [[ -z ${NEW_HOSTNAME} ]]; then
        read -p "What hostname do you want? Defaults to ${INSTALL_DEFAULT_HOSTNAME}. " hostnameanswer
        NEW_HOSTNAME=${hostnameanswer:-${INSTALL_DEFAULT_HOSTNAME}}
    fi
    hostnamectl set-hostname ${NEW_HOSTNAME}

    # Set timezone
    if [[ -z ${TIMEZONE} ]]; then
        read -p "Which timezone should be set? Defaults to ${INSTALL_DEFAULT_TIMEZONE}. " timezoneanswer
        TIMEZONE=${timezoneanswer:-${INSTALL_DEFAULT_TIMEZONE}}
    fi
    timedatectl set-timezone ${TIMEZONE}

    if [[ $(type -t board_post_install) == "function" ]]; then
        echo "Doing some custom work specific to this board"
        board_post_install
    fi
    if [[ $(type -t os_post_install) == "function" ]]; then
        echo "Doing some custom work specific to this OS"
        os_post_install
    fi

    # Reboot?
    if [[ -z ${REBOOT} ]]; then
        read -p "Do you want to reboot now? A reboot is required for Docker to function. Y is default. [Y/n] " rebootanswer

        case ${rebootanswer} in
            [nN]*)
                echo "Done.";;
            *)
                reboot;;
        esac
    elif [[ ${REBOOT} == 1 || ${REBOOT} == "y" || ${REBOOT} == "Y" ]]; then
        reboot
    fi
}

enable-master() {
    kubeadm init --use-kubernetes-version=${SUPPORTED_K8S_VERSION} --pod-network-cidr=${POD_NETWORK_CIDR}
    curl -sSL https://github.com/luxas/flannel/blob/06b47705411944d37b174dbab7f64e16f32a04ee/Documentation/kube-flannel.yml | sed "s/amd64/arm/" | kubectl apply -f -
}

enable-worker() {
    kubeadm join --token=$1 $2
}

turndown(){
    cd ${MULTINODE_DIR}
    ./turndown.sh
}

change-addon() {
	if [[ $(is-active) == 1 ]]; then

		ACTION=$1
		shift
        for ADDON in $@; do
            if [[ -f ${KUBERNETES_ON_ARM_ADDONS_DIR}/${ADDON}.yaml ]]; then

                sed -e "s|VERSION|${KUBERNETES_ON_ARM_IMAGE_VERSION}|g" ${KUBERNETES_ON_ARM_ADDONS_DIR}/${ADDON}.yaml | kubectl ${ACTION} -f -
            else
                echo "This addon doesn't exist: ${ADDON}"
            fi
        done
    else
        echo "Kubernetes is not running!"
    fi
}


version(){
    echo "Architecture: $(uname -m)" 
    echo "Kernel: $(uname) $(uname -r | grep -o "[0-9.]*" | grep "[.]")"
    echo "CPU: $(lscpu | grep 'Core(s)' | grep -o "[0-9]*") cores x $(lscpu | grep "CPU max" | grep -o "[0-9]*" | head -1) MHz"

    echo
    echo "Used RAM Memory: $(free -m | grep Mem | awk '{print $3}') MiB"
    echo "RAM Memory: $(free -m | grep Mem | awk '{print $2}') MiB"
    echo
    echo "Used disk space: $(df -h | grep /dev/root | awk '{print $3}')B ($(df | grep /dev/root | awk '{print $3}') KB)"
    echo "Free disk space: $(df -h | grep /dev/root | awk '{print $4}')B ($(df | grep /dev/root | awk '{print $4}') KB)"
    echo

    if [[ -f ${KUBERNETES_DIR}/SDCard_metadata.conf ]]; then
        source ${KUBERNETES_DIR}/SDCard_metadata.conf
        D=${SDCARD_BUILD_DATE}
        echo "SD Card/deb package was built: $(echo $D | cut -c1-2)-$(echo $D | cut -c3-4)-20$(echo $D | cut -c5-6) $(echo $D | cut -c8-9):$(echo $D | cut -c10-11)"
        echo
        echo "kubernetes-on-arm: "
        echo "Latest commit: ${K8S_ON_ARM_COMMIT}"
        echo "Version: ${K8S_ON_ARM_VERSION}"
        echo
    fi

    echo "systemd version: v$(systemctl --version | head -1 | cut -c9-)"
    if [[ -f $(which docker) ]]; then

        echo "docker version: v$(docker --version | awk '{print $3}' | sed -e 's/,$//')"
    fi

    # if kubectl exists, output k8s server version. If there is no server, output client Version
    if [[ -f $(which kubectl 2>&1) ]]; then
        SERVER_K8S=$(kubectl version 2>&1 | grep Server | grep -o "v[0-9.]*" | grep "[0-9]")

        if [[ ! -z $SERVER_K8S ]]; then
            echo "kubernetes server version: $SERVER_K8S"
            echo
            echo "CPU Time (minutes):"
            echo "kubelet: $(getcputime kubelet)"
            echo "kubelet has been up for: $(docker ps -f "ID=$(docker ps | grep kubelet | awk '{print $1}')" --format "{{.RunningFor}}")"
            echo "proxy: $(getcputime proxy)"

            if [[ $(get-node-type) == "master" ]]; then
                echo "apiserver: $(getcputime apiserver)"
                echo "controller-manager: $(getcputime controller-manager)"
                echo "scheduler: $(getcputime scheduler)"
            fi
        else
            echo "kubernetes client version: $(kubectl version -c 2>&1 | grep Client | grep -o "v[0-9.]*" | grep "[0-9]")"
        fi
    fi
}

getcputime(){
    echo $(ps aux | grep " $1 " | grep -v grep | grep -v docker | awk '{print $10}')
}

# Example: updateline path_to_file value_to_search_for replace_that_line_with_this_content
# 
updateline(){
    if [[ -z $(cat $1 | grep "$2") ]]; then
        echo "$3" >> $1
    else
        sed -i "/$2/c\\$3" $1
    fi
}

checkformaster(){
    if [[ $(curl -m 5 -sSLIk http://${1}:8080 2>&1 | head -1) == *"OK"* ]]; then
        echo "OK"
    fi
}

get-node-type(){
    local active=$(is-active)
    if [[ ${active} == 1 && $(docker ps 2>&1 | grep apiserver) != "" ]]; then
        echo "master"
    elif [[ ${active} == 1 ]]; then
        echo "worker"
    else
        echo ""
    fi 
}

# Is kubernetes enabled?
is-active(){
    if [[ $(docker ps 2>&1 | grep kubelet) != "" ]]; then
        echo 1;
    else 
        echo 0;
    fi
}

# If nothing is specified, return usage
if [[ $# == 0 ]]; then
    usage
    exit
fi

# Commands available
case $1 in
    'install')
        install;;

    'enable-master')
        enable-master;;
    'enable-worker')
        enable-worker $2;;
    'enable-addon')
        shift
        change-addon create $@;;

    'disable')
        turndown;;
    'disable-addon')
        shift
        change-addon delete $@;;

    'info')
        version;;
    'help')
        usage;;
    *) 
        usage;;
esac

